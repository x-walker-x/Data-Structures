{
	// Place your snippets for cpp here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
  
	"C++ CP starting Snippet" : {
		"prefix": "asd",
		"body": ["#include <bits/stdc++.h>",
				 "using namespace std;\n",
				 "#define endl \"\\n\"",
				 "#define MOD 1000000007",
				 "#define pub push_back",
				 "#define pob pop_back",
				 "#define fi first",
				 "#define se second",
				 "#define boost ios_base::sync_with_stdio(false);cin.tie(NULL);",
				 "#define filestream freopen(\"input.txt\", \"r\", stdin);freopen(\"output.txt\", \"w\", stdout);",
				 "\n",
				 "#define sz(cont) cont.size()",
				 "#define ifor(i, s, e) for(int i = (s); i < (e); i++)",
				 "#define dfor(i, s, e) for(int i = (s); i >= (e); i--)",
				 "#define rfor(cont) for(auto &ele : cont)",
				 "#define sorti(cont) sort(cont.begin(), cont.end())",
				 "#define sortd(cont) sort(cont.rbegin(), cont.rend())",
				 "\n",
				 "typedef long long int ll;",
				 "typedef vector<int> vi;",
				 "typedef vector<ll> vll;",
				 "typedef map<int, int> mii;",
				 "typedef map<char, int> mci;",
				 "typedef stack<int> stki;",
				 "typedef queue<int> quei;",
				 "\n",
				 "int main() {",
				 "\n\tboost",
				 "\n\t$0\n\n",
				 "\treturn 0;",
				 "}"
				],
		"description": "C++ CP Snippet"
	},

	"Test case loop": {
		"prefix": "tcl",
		"body": [
			"int t = 0; cin >> t;",
			"while (t--) {",
			"\t$0",
			"}"
		],
		"description": "Test case loop"
	},

	"Array input": {
		"prefix": "arri",
		"body": [
			"for (int i = 0; i<$1; i++) {",
			"\tcin >> $2[i];",
			"}",
			"$0"
		],
		"description": "Take input in array/vector"
	},

	"Array output": {
		"prefix": "arro",
		"body": [
			"for (int i = 0; i<$1; i++) {",
			"\tcout << $2[i] << \" \";",
			"}",
			"cout << \"\\n\";",
			"$0"
		],
		"description": "Print output of array/vector"
	},

	"Graph Declare": {
		"prefix": "graph",
		"body": [
			"int n = $1;",
			"vector<int> adj[$1+1];",
			"vector<bool> vis($1+1, false);",
		],
		"description": "Graph Declare"
	},

	"Graph for loop": {
		"prefix": "gfor",
		"body": [
			"for(int i = $1; i < $2; i++) {",
			"\tint node1, node2;",
			"\tcin >> node1 >> node2;",
			"\tadj[node1].pub(node2);",
			"\tadj[node2].pub(node1);",
			"}"
		],
		"description": "Graph for loop"
	},
	
	"BFS": {
		"prefix": "getbfs",
		"body": [ 
			"void bfs(int s) {",
    		"\tqueue<int> q;",
    		"\tvector<bool> vis(n);",
    		"\tq.push(s);",
    		"\tvis[s] = true;",
    		"\twhile (!q.empty()) {",
        	"\t\tint v = q.front();",
        	"\t\tq.pop();",
        	"\t\tfor (auto u : adj[v]) {",
         	"\t\t\tif (!vis[u]) {",
            "\t\t\t\tvis[u] = true;",
            "\t\t\t\tq.push(u);",
            "\t\t\t}",
        	"\t\t}",
			"\t}",
			"}"
		],
		"description": "BFS traversal"
	},

	"DFS": {
		"prefix": "getdfs",
		"body": [ 
			"void dfs(int v) {",
			"\tvis[v] = true;",
			"\tfor (int u : adj[v]) {",
			"\t\tif (!vis[u])",
			"\t\t\tdfs(u);",
			"\t}",
			"}"
		],
		"description": "DFS traversal"
	},

	"Connected Components": {
		"prefix": "ccomp",
		"body": [ 
			"void connected_components() {",
			"\tfor (int v = 1; v <= n; v++) {",
			"\t\tif (!vis[u])",
			"\t\t\t$1",
			"\t}",
			"}",
		],
		"description": "Find Connected Components"
	}
	
}
